/* rrapi_RRWsdlBindingProxy.h
   Generated by gSOAP 2.8.109 for api.radioreference.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef rrapi_RRWsdlBindingProxy_H
#define rrapi_RRWsdlBindingProxy_H
#include "rrapi_H.h"

    class SOAP_CMAC RRWsdlBindingProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'RRWsdlBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in api.radioreference.h, if any
        /// Construct a proxy with new managing context
        RRWsdlBindingProxy();
        /// Copy constructor
        RRWsdlBindingProxy(const RRWsdlBindingProxy& rhs);
        /// Construct proxy given a shared managing context
        RRWsdlBindingProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        RRWsdlBindingProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        RRWsdlBindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        RRWsdlBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        RRWsdlBindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        RRWsdlBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~RRWsdlBindingProxy();
        /// Initializer used by constructors
        virtual void RRWsdlBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual RRWsdlBindingProxy *copy();
        /// Copy assignment
        RRWsdlBindingProxy& operator=(const RRWsdlBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'getTrsTalkgroups' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsTalkgroups(int sid, int tgCid, int tgTag, int tgDec, ns1__authInfo *authInfo, struct ns1__getTrsTalkgroupsResponse &_param_1) { return this->getTrsTalkgroups(NULL, NULL, sid, tgCid, tgTag, tgDec, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsTalkgroups' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsTalkgroups(const char *soap_endpoint_url, const char *soap_action, int sid, int tgCid, int tgTag, int tgDec, ns1__authInfo *authInfo, struct ns1__getTrsTalkgroupsResponse &_param_1) { return this->send_getTrsTalkgroups(soap_endpoint_url, soap_action, sid, tgCid, tgTag, tgDec, authInfo) || this->recv_getTrsTalkgroups(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsTalkgroups' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsTalkgroups(const char *soap_endpoint_url, const char *soap_action, int sid, int tgCid, int tgTag, int tgDec, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsTalkgroups' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsTalkgroups(struct ns1__getTrsTalkgroupsResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsTalkgroupCats' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsTalkgroupCats(int sid, ns1__authInfo *authInfo, struct ns1__getTrsTalkgroupCatsResponse &_param_1) { return this->getTrsTalkgroupCats(NULL, NULL, sid, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsTalkgroupCats' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsTalkgroupCats(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo, struct ns1__getTrsTalkgroupCatsResponse &_param_1) { return this->send_getTrsTalkgroupCats(soap_endpoint_url, soap_action, sid, authInfo) || this->recv_getTrsTalkgroupCats(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsTalkgroupCats' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsTalkgroupCats(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsTalkgroupCats' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsTalkgroupCats(struct ns1__getTrsTalkgroupCatsResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsDetails' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsDetails(int sid, ns1__authInfo *authInfo, struct ns1__getTrsDetailsResponse &_param_1) { return this->getTrsDetails(NULL, NULL, sid, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsDetails' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsDetails(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo, struct ns1__getTrsDetailsResponse &_param_1) { return this->send_getTrsDetails(soap_endpoint_url, soap_action, sid, authInfo) || this->recv_getTrsDetails(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsDetails' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsDetails(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsDetails' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsDetails(struct ns1__getTrsDetailsResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsBySysid' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsBySysid(const std::string& sysid, ns1__authInfo *authInfo, struct ns1__getTrsBySysidResponse &_param_1) { return this->getTrsBySysid(NULL, NULL, sysid, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsBySysid' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsBySysid(const char *soap_endpoint_url, const char *soap_action, const std::string& sysid, ns1__authInfo *authInfo, struct ns1__getTrsBySysidResponse &_param_1) { return this->send_getTrsBySysid(soap_endpoint_url, soap_action, sysid, authInfo) || this->recv_getTrsBySysid(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsBySysid' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsBySysid(const char *soap_endpoint_url, const char *soap_action, const std::string& sysid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsBySysid' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsBySysid(struct ns1__getTrsBySysidResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsSites' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsSites(int sid, ns1__authInfo *authInfo, struct ns1__getTrsSitesResponse &_param_1) { return this->getTrsSites(NULL, NULL, sid, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsSites' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsSites(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo, struct ns1__getTrsSitesResponse &_param_1) { return this->send_getTrsSites(soap_endpoint_url, soap_action, sid, authInfo) || this->recv_getTrsSites(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsSites' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsSites(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsSites' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsSites(struct ns1__getTrsSitesResponse &_param_1);
        //
        /// Web service synchronous operation 'getStatesByList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getStatesByList(stidList *request, ns1__authInfo *authInfo, struct ns1__getStatesByListResponse &_param_1) { return this->getStatesByList(NULL, NULL, request, authInfo, _param_1); }
        /// Web service synchronous operation 'getStatesByList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getStatesByList(const char *soap_endpoint_url, const char *soap_action, stidList *request, ns1__authInfo *authInfo, struct ns1__getStatesByListResponse &_param_1) { return this->send_getStatesByList(soap_endpoint_url, soap_action, request, authInfo) || this->recv_getStatesByList(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getStatesByList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getStatesByList(const char *soap_endpoint_url, const char *soap_action, stidList *request, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getStatesByList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getStatesByList(struct ns1__getStatesByListResponse &_param_1);
        //
        /// Web service synchronous operation 'getCountiesByList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getCountiesByList(ctidList *request, ns1__authInfo *authInfo, struct ns1__getCountiesByListResponse &_param_1) { return this->getCountiesByList(NULL, NULL, request, authInfo, _param_1); }
        /// Web service synchronous operation 'getCountiesByList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getCountiesByList(const char *soap_endpoint_url, const char *soap_action, ctidList *request, ns1__authInfo *authInfo, struct ns1__getCountiesByListResponse &_param_1) { return this->send_getCountiesByList(soap_endpoint_url, soap_action, request, authInfo) || this->recv_getCountiesByList(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getCountiesByList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getCountiesByList(const char *soap_endpoint_url, const char *soap_action, ctidList *request, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getCountiesByList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getCountiesByList(struct ns1__getCountiesByListResponse &_param_1);
        //
        /// Web service synchronous operation 'getTag' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTag(int id, ns1__authInfo *authInfo, struct ns1__getTagResponse &_param_1) { return this->getTag(NULL, NULL, id, authInfo, _param_1); }
        /// Web service synchronous operation 'getTag' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTag(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo, struct ns1__getTagResponse &_param_1) { return this->send_getTag(soap_endpoint_url, soap_action, id, authInfo) || this->recv_getTag(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTag' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTag(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTag' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTag(struct ns1__getTagResponse &_param_1);
        //
        /// Web service synchronous operation 'getMode' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getMode(int mode, ns1__authInfo *authInfo, struct ns1__getModeResponse &_param_1) { return this->getMode(NULL, NULL, mode, authInfo, _param_1); }
        /// Web service synchronous operation 'getMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getMode(const char *soap_endpoint_url, const char *soap_action, int mode, ns1__authInfo *authInfo, struct ns1__getModeResponse &_param_1) { return this->send_getMode(soap_endpoint_url, soap_action, mode, authInfo) || this->recv_getMode(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getMode(const char *soap_endpoint_url, const char *soap_action, int mode, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getMode(struct ns1__getModeResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsType' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsType(int id, ns1__authInfo *authInfo, struct ns1__getTrsTypeResponse &_param_1) { return this->getTrsType(NULL, NULL, id, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsType' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsType(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo, struct ns1__getTrsTypeResponse &_param_1) { return this->send_getTrsType(soap_endpoint_url, soap_action, id, authInfo) || this->recv_getTrsType(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsType' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsType(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsType' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsType(struct ns1__getTrsTypeResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsFlavor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsFlavor(int id, ns1__authInfo *authInfo, struct ns1__getTrsFlavorResponse &_param_1) { return this->getTrsFlavor(NULL, NULL, id, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsFlavor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsFlavor(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo, struct ns1__getTrsFlavorResponse &_param_1) { return this->send_getTrsFlavor(soap_endpoint_url, soap_action, id, authInfo) || this->recv_getTrsFlavor(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsFlavor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsFlavor(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsFlavor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsFlavor(struct ns1__getTrsFlavorResponse &_param_1);
        //
        /// Web service synchronous operation 'getTrsVoice' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsVoice(int id, ns1__authInfo *authInfo, struct ns1__getTrsVoiceResponse &_param_1) { return this->getTrsVoice(NULL, NULL, id, authInfo, _param_1); }
        /// Web service synchronous operation 'getTrsVoice' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getTrsVoice(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo, struct ns1__getTrsVoiceResponse &_param_1) { return this->send_getTrsVoice(soap_endpoint_url, soap_action, id, authInfo) || this->recv_getTrsVoice(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getTrsVoice' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getTrsVoice(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getTrsVoice' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getTrsVoice(struct ns1__getTrsVoiceResponse &_param_1);
        //
        /// Web service synchronous operation 'getCountryList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getCountryList(struct ns1__getCountryListResponse &_param_1) { return this->getCountryList(NULL, NULL, _param_1); }
        /// Web service synchronous operation 'getCountryList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getCountryList(const char *soap_endpoint_url, const char *soap_action, struct ns1__getCountryListResponse &_param_1) { return this->send_getCountryList(soap_endpoint_url, soap_action) || this->recv_getCountryList(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getCountryList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getCountryList(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_getCountryList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getCountryList(struct ns1__getCountryListResponse &_param_1);
        //
        /// Web service synchronous operation 'getCountryInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getCountryInfo(int coid, ns1__authInfo *authInfo, struct ns1__getCountryInfoResponse &_param_1) { return this->getCountryInfo(NULL, NULL, coid, authInfo, _param_1); }
        /// Web service synchronous operation 'getCountryInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getCountryInfo(const char *soap_endpoint_url, const char *soap_action, int coid, ns1__authInfo *authInfo, struct ns1__getCountryInfoResponse &_param_1) { return this->send_getCountryInfo(soap_endpoint_url, soap_action, coid, authInfo) || this->recv_getCountryInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getCountryInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getCountryInfo(const char *soap_endpoint_url, const char *soap_action, int coid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getCountryInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getCountryInfo(struct ns1__getCountryInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'getStateInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getStateInfo(int stid, ns1__authInfo *authInfo, struct ns1__getStateInfoResponse &_param_1) { return this->getStateInfo(NULL, NULL, stid, authInfo, _param_1); }
        /// Web service synchronous operation 'getStateInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getStateInfo(const char *soap_endpoint_url, const char *soap_action, int stid, ns1__authInfo *authInfo, struct ns1__getStateInfoResponse &_param_1) { return this->send_getStateInfo(soap_endpoint_url, soap_action, stid, authInfo) || this->recv_getStateInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getStateInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getStateInfo(const char *soap_endpoint_url, const char *soap_action, int stid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getStateInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getStateInfo(struct ns1__getStateInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'getCountyInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getCountyInfo(int ctid, ns1__authInfo *authInfo, struct ns1__getCountyInfoResponse &_param_1) { return this->getCountyInfo(NULL, NULL, ctid, authInfo, _param_1); }
        /// Web service synchronous operation 'getCountyInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getCountyInfo(const char *soap_endpoint_url, const char *soap_action, int ctid, ns1__authInfo *authInfo, struct ns1__getCountyInfoResponse &_param_1) { return this->send_getCountyInfo(soap_endpoint_url, soap_action, ctid, authInfo) || this->recv_getCountyInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getCountyInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getCountyInfo(const char *soap_endpoint_url, const char *soap_action, int ctid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getCountyInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getCountyInfo(struct ns1__getCountyInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'getAgencyInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getAgencyInfo(int aid, ns1__authInfo *authInfo, struct ns1__getAgencyInfoResponse &_param_1) { return this->getAgencyInfo(NULL, NULL, aid, authInfo, _param_1); }
        /// Web service synchronous operation 'getAgencyInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getAgencyInfo(const char *soap_endpoint_url, const char *soap_action, int aid, ns1__authInfo *authInfo, struct ns1__getAgencyInfoResponse &_param_1) { return this->send_getAgencyInfo(soap_endpoint_url, soap_action, aid, authInfo) || this->recv_getAgencyInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getAgencyInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getAgencyInfo(const char *soap_endpoint_url, const char *soap_action, int aid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getAgencyInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getAgencyInfo(struct ns1__getAgencyInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'getSubcatFreqs' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getSubcatFreqs(int scid, ns1__authInfo *authInfo, struct ns1__getSubcatFreqsResponse &_param_1) { return this->getSubcatFreqs(NULL, NULL, scid, authInfo, _param_1); }
        /// Web service synchronous operation 'getSubcatFreqs' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getSubcatFreqs(const char *soap_endpoint_url, const char *soap_action, int scid, ns1__authInfo *authInfo, struct ns1__getSubcatFreqsResponse &_param_1) { return this->send_getSubcatFreqs(soap_endpoint_url, soap_action, scid, authInfo) || this->recv_getSubcatFreqs(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getSubcatFreqs' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getSubcatFreqs(const char *soap_endpoint_url, const char *soap_action, int scid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getSubcatFreqs' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getSubcatFreqs(struct ns1__getSubcatFreqsResponse &_param_1);
        //
        /// Web service synchronous operation 'searchCountyFreq' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int searchCountyFreq(int ctid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchCountyFreqResponse &_param_1) { return this->searchCountyFreq(NULL, NULL, ctid, freq, tone, authInfo, _param_1); }
        /// Web service synchronous operation 'searchCountyFreq' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int searchCountyFreq(const char *soap_endpoint_url, const char *soap_action, int ctid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchCountyFreqResponse &_param_1) { return this->send_searchCountyFreq(soap_endpoint_url, soap_action, ctid, freq, tone, authInfo) || this->recv_searchCountyFreq(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_searchCountyFreq' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_searchCountyFreq(const char *soap_endpoint_url, const char *soap_action, int ctid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_searchCountyFreq' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_searchCountyFreq(struct ns1__searchCountyFreqResponse &_param_1);
        //
        /// Web service synchronous operation 'searchStateFreq' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int searchStateFreq(int stid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchStateFreqResponse &_param_1) { return this->searchStateFreq(NULL, NULL, stid, freq, tone, authInfo, _param_1); }
        /// Web service synchronous operation 'searchStateFreq' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int searchStateFreq(const char *soap_endpoint_url, const char *soap_action, int stid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchStateFreqResponse &_param_1) { return this->send_searchStateFreq(soap_endpoint_url, soap_action, stid, freq, tone, authInfo) || this->recv_searchStateFreq(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_searchStateFreq' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_searchStateFreq(const char *soap_endpoint_url, const char *soap_action, int stid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_searchStateFreq' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_searchStateFreq(struct ns1__searchStateFreqResponse &_param_1);
        //
        /// Web service synchronous operation 'searchMetroFreq' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int searchMetroFreq(int mid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchMetroFreqResponse &_param_1) { return this->searchMetroFreq(NULL, NULL, mid, freq, tone, authInfo, _param_1); }
        /// Web service synchronous operation 'searchMetroFreq' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int searchMetroFreq(const char *soap_endpoint_url, const char *soap_action, int mid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo, struct ns1__searchMetroFreqResponse &_param_1) { return this->send_searchMetroFreq(soap_endpoint_url, soap_action, mid, freq, tone, authInfo) || this->recv_searchMetroFreq(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_searchMetroFreq' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_searchMetroFreq(const char *soap_endpoint_url, const char *soap_action, int mid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_searchMetroFreq' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_searchMetroFreq(struct ns1__searchMetroFreqResponse &_param_1);
        //
        /// Web service synchronous operation 'getCountyFreqsByTag' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getCountyFreqsByTag(int ctid, int tag, ns1__authInfo *authInfo, struct ns1__getCountyFreqsByTagResponse &_param_1) { return this->getCountyFreqsByTag(NULL, NULL, ctid, tag, authInfo, _param_1); }
        /// Web service synchronous operation 'getCountyFreqsByTag' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getCountyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int ctid, int tag, ns1__authInfo *authInfo, struct ns1__getCountyFreqsByTagResponse &_param_1) { return this->send_getCountyFreqsByTag(soap_endpoint_url, soap_action, ctid, tag, authInfo) || this->recv_getCountyFreqsByTag(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getCountyFreqsByTag' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getCountyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int ctid, int tag, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getCountyFreqsByTag' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getCountyFreqsByTag(struct ns1__getCountyFreqsByTagResponse &_param_1);
        //
        /// Web service synchronous operation 'getAgencyFreqsByTag' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getAgencyFreqsByTag(int aid, int tag, ns1__authInfo *authInfo, struct ns1__getAgencyFreqsByTagResponse &_param_1) { return this->getAgencyFreqsByTag(NULL, NULL, aid, tag, authInfo, _param_1); }
        /// Web service synchronous operation 'getAgencyFreqsByTag' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getAgencyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int aid, int tag, ns1__authInfo *authInfo, struct ns1__getAgencyFreqsByTagResponse &_param_1) { return this->send_getAgencyFreqsByTag(soap_endpoint_url, soap_action, aid, tag, authInfo) || this->recv_getAgencyFreqsByTag(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getAgencyFreqsByTag' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getAgencyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int aid, int tag, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getAgencyFreqsByTag' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getAgencyFreqsByTag(struct ns1__getAgencyFreqsByTagResponse &_param_1);
        //
        /// Web service synchronous operation 'getMetroArea' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getMetroArea(int mid, ns1__authInfo *authInfo, struct ns1__getMetroAreaResponse &_param_1) { return this->getMetroArea(NULL, NULL, mid, authInfo, _param_1); }
        /// Web service synchronous operation 'getMetroArea' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getMetroArea(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo, struct ns1__getMetroAreaResponse &_param_1) { return this->send_getMetroArea(soap_endpoint_url, soap_action, mid, authInfo) || this->recv_getMetroArea(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getMetroArea' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getMetroArea(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getMetroArea' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getMetroArea(struct ns1__getMetroAreaResponse &_param_1);
        //
        /// Web service synchronous operation 'getMetroAreaInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getMetroAreaInfo(int mid, ns1__authInfo *authInfo, struct ns1__getMetroAreaInfoResponse &_param_1) { return this->getMetroAreaInfo(NULL, NULL, mid, authInfo, _param_1); }
        /// Web service synchronous operation 'getMetroAreaInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getMetroAreaInfo(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo, struct ns1__getMetroAreaInfoResponse &_param_1) { return this->send_getMetroAreaInfo(soap_endpoint_url, soap_action, mid, authInfo) || this->recv_getMetroAreaInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getMetroAreaInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getMetroAreaInfo(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getMetroAreaInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getMetroAreaInfo(struct ns1__getMetroAreaInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'getZipcodeInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getZipcodeInfo(int zipcode, ns1__authInfo *authInfo, struct ns1__getZipcodeInfoResponse &_param_1) { return this->getZipcodeInfo(NULL, NULL, zipcode, authInfo, _param_1); }
        /// Web service synchronous operation 'getZipcodeInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getZipcodeInfo(const char *soap_endpoint_url, const char *soap_action, int zipcode, ns1__authInfo *authInfo, struct ns1__getZipcodeInfoResponse &_param_1) { return this->send_getZipcodeInfo(soap_endpoint_url, soap_action, zipcode, authInfo) || this->recv_getZipcodeInfo(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getZipcodeInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getZipcodeInfo(const char *soap_endpoint_url, const char *soap_action, int zipcode, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getZipcodeInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getZipcodeInfo(struct ns1__getZipcodeInfoResponse &_param_1);
        //
        /// Web service synchronous operation 'fccGetCallsign' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetCallsign(const std::string& callsign, ns1__authInfo *authInfo, struct ns1__fccGetCallsignResponse &_param_1) { return this->fccGetCallsign(NULL, NULL, callsign, authInfo, _param_1); }
        /// Web service synchronous operation 'fccGetCallsign' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetCallsign(const char *soap_endpoint_url, const char *soap_action, const std::string& callsign, ns1__authInfo *authInfo, struct ns1__fccGetCallsignResponse &_param_1) { return this->send_fccGetCallsign(soap_endpoint_url, soap_action, callsign, authInfo) || this->recv_fccGetCallsign(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_fccGetCallsign' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_fccGetCallsign(const char *soap_endpoint_url, const char *soap_action, const std::string& callsign, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_fccGetCallsign' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_fccGetCallsign(struct ns1__fccGetCallsignResponse &_param_1);
        //
        /// Web service synchronous operation 'fccGetRadioServiceCode' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetRadioServiceCode(const std::string& code, ns1__authInfo *authInfo, struct ns1__fccGetRadioServiceCodeResponse &_param_1) { return this->fccGetRadioServiceCode(NULL, NULL, code, authInfo, _param_1); }
        /// Web service synchronous operation 'fccGetRadioServiceCode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetRadioServiceCode(const char *soap_endpoint_url, const char *soap_action, const std::string& code, ns1__authInfo *authInfo, struct ns1__fccGetRadioServiceCodeResponse &_param_1) { return this->send_fccGetRadioServiceCode(soap_endpoint_url, soap_action, code, authInfo) || this->recv_fccGetRadioServiceCode(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_fccGetRadioServiceCode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_fccGetRadioServiceCode(const char *soap_endpoint_url, const char *soap_action, const std::string& code, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_fccGetRadioServiceCode' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_fccGetRadioServiceCode(struct ns1__fccGetRadioServiceCodeResponse &_param_1);
        //
        /// Web service synchronous operation 'fccGetProxCallsigns' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetProxCallsigns(const std::string& lat, const std::string& lon, const std::string& range, const std::string& unit, ns1__authInfo *authInfo, struct ns1__fccGetProxCallsignsResponse &_param_1) { return this->fccGetProxCallsigns(NULL, NULL, lat, lon, range, unit, authInfo, _param_1); }
        /// Web service synchronous operation 'fccGetProxCallsigns' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int fccGetProxCallsigns(const char *soap_endpoint_url, const char *soap_action, const std::string& lat, const std::string& lon, const std::string& range, const std::string& unit, ns1__authInfo *authInfo, struct ns1__fccGetProxCallsignsResponse &_param_1) { return this->send_fccGetProxCallsigns(soap_endpoint_url, soap_action, lat, lon, range, unit, authInfo) || this->recv_fccGetProxCallsigns(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_fccGetProxCallsigns' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_fccGetProxCallsigns(const char *soap_endpoint_url, const char *soap_action, const std::string& lat, const std::string& lon, const std::string& range, const std::string& unit, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_fccGetProxCallsigns' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_fccGetProxCallsigns(struct ns1__fccGetProxCallsignsResponse &_param_1);
        //
        /// Web service synchronous operation 'getUserData' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getUserData(ns1__authInfo *authInfo, struct ns1__getUserDataResponse &_param_1) { return this->getUserData(NULL, NULL, authInfo, _param_1); }
        /// Web service synchronous operation 'getUserData' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getUserData(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo, struct ns1__getUserDataResponse &_param_1) { return this->send_getUserData(soap_endpoint_url, soap_action, authInfo) || this->recv_getUserData(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getUserData' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getUserData(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getUserData' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getUserData(struct ns1__getUserDataResponse &_param_1);
        //
        /// Web service synchronous operation 'getUserFeedBroadcasts' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getUserFeedBroadcasts(ns1__authInfo *authInfo, struct ns1__getUserFeedBroadcastsResponse &_param_1) { return this->getUserFeedBroadcasts(NULL, NULL, authInfo, _param_1); }
        /// Web service synchronous operation 'getUserFeedBroadcasts' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getUserFeedBroadcasts(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo, struct ns1__getUserFeedBroadcastsResponse &_param_1) { return this->send_getUserFeedBroadcasts(soap_endpoint_url, soap_action, authInfo) || this->recv_getUserFeedBroadcasts(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getUserFeedBroadcasts' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getUserFeedBroadcasts(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo);
        /// Web service asynchronous operation 'recv_getUserFeedBroadcasts' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getUserFeedBroadcasts(struct ns1__getUserFeedBroadcastsResponse &_param_1);
    };
#endif
