/* rrapi_RRWsdlBindingProxy.cpp
   Generated by gSOAP 2.8.109 for api.radioreference.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "rrapi_RRWsdlBindingProxy.h"

RRWsdlBindingProxy::RRWsdlBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	RRWsdlBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RRWsdlBindingProxy::RRWsdlBindingProxy(const RRWsdlBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

RRWsdlBindingProxy::RRWsdlBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	RRWsdlBindingProxy_init(_soap->imode, _soap->omode);
}

RRWsdlBindingProxy::RRWsdlBindingProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	RRWsdlBindingProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

RRWsdlBindingProxy::RRWsdlBindingProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	RRWsdlBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

RRWsdlBindingProxy::RRWsdlBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RRWsdlBindingProxy_init(iomode, iomode);
}

RRWsdlBindingProxy::RRWsdlBindingProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RRWsdlBindingProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

RRWsdlBindingProxy::RRWsdlBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	RRWsdlBindingProxy_init(imode, omode);
}

RRWsdlBindingProxy::~RRWsdlBindingProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void RRWsdlBindingProxy::RRWsdlBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://api.radioreference.com/soap2", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

RRWsdlBindingProxy *RRWsdlBindingProxy::copy()
{	RRWsdlBindingProxy *dup = SOAP_NEW_UNMANAGED(RRWsdlBindingProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

RRWsdlBindingProxy& RRWsdlBindingProxy::operator=(const RRWsdlBindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void RRWsdlBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void RRWsdlBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	RRWsdlBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void RRWsdlBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *RRWsdlBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *RRWsdlBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *RRWsdlBindingProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *RRWsdlBindingProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *RRWsdlBindingProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int RRWsdlBindingProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int RRWsdlBindingProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void RRWsdlBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RRWsdlBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *RRWsdlBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int RRWsdlBindingProxy::send_getTrsTalkgroups(const char *soap_endpoint_url, const char *soap_action, int sid, int tgCid, int tgTag, int tgDec, ns1__authInfo *authInfo)
{
	struct ns1__getTrsTalkgroups soap_tmp_ns1__getTrsTalkgroups;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsTalkgroups";
	soap_tmp_ns1__getTrsTalkgroups.sid = sid;
	soap_tmp_ns1__getTrsTalkgroups.tgCid = tgCid;
	soap_tmp_ns1__getTrsTalkgroups.tgTag = tgTag;
	soap_tmp_ns1__getTrsTalkgroups.tgDec = tgDec;
	soap_tmp_ns1__getTrsTalkgroups.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsTalkgroups(soap, &soap_tmp_ns1__getTrsTalkgroups);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsTalkgroups(soap, &soap_tmp_ns1__getTrsTalkgroups, "ns1:getTrsTalkgroups", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsTalkgroups(soap, &soap_tmp_ns1__getTrsTalkgroups, "ns1:getTrsTalkgroups", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsTalkgroups(struct ns1__getTrsTalkgroupsResponse &_param_1)
{
	soap_default_ns1__getTrsTalkgroupsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsTalkgroupsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsTalkgroupCats(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo)
{
	struct ns1__getTrsTalkgroupCats soap_tmp_ns1__getTrsTalkgroupCats;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsTalkgroupCats";
	soap_tmp_ns1__getTrsTalkgroupCats.sid = sid;
	soap_tmp_ns1__getTrsTalkgroupCats.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsTalkgroupCats(soap, &soap_tmp_ns1__getTrsTalkgroupCats);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsTalkgroupCats(soap, &soap_tmp_ns1__getTrsTalkgroupCats, "ns1:getTrsTalkgroupCats", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsTalkgroupCats(soap, &soap_tmp_ns1__getTrsTalkgroupCats, "ns1:getTrsTalkgroupCats", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsTalkgroupCats(struct ns1__getTrsTalkgroupCatsResponse &_param_1)
{
	soap_default_ns1__getTrsTalkgroupCatsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsTalkgroupCatsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsDetails(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo)
{
	struct ns1__getTrsDetails soap_tmp_ns1__getTrsDetails;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsDetails";
	soap_tmp_ns1__getTrsDetails.sid = sid;
	soap_tmp_ns1__getTrsDetails.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsDetails(soap, &soap_tmp_ns1__getTrsDetails);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsDetails(soap, &soap_tmp_ns1__getTrsDetails, "ns1:getTrsDetails", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsDetails(soap, &soap_tmp_ns1__getTrsDetails, "ns1:getTrsDetails", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsDetails(struct ns1__getTrsDetailsResponse &_param_1)
{
	soap_default_ns1__getTrsDetailsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsDetailsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsBySysid(const char *soap_endpoint_url, const char *soap_action, const std::string& sysid, ns1__authInfo *authInfo)
{
	struct ns1__getTrsBySysid soap_tmp_ns1__getTrsBySysid;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsBySysid";
	soap_tmp_ns1__getTrsBySysid.sysid = sysid;
	soap_tmp_ns1__getTrsBySysid.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsBySysid(soap, &soap_tmp_ns1__getTrsBySysid);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsBySysid(soap, &soap_tmp_ns1__getTrsBySysid, "ns1:getTrsBySysid", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsBySysid(soap, &soap_tmp_ns1__getTrsBySysid, "ns1:getTrsBySysid", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsBySysid(struct ns1__getTrsBySysidResponse &_param_1)
{
	soap_default_ns1__getTrsBySysidResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsBySysidResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsSites(const char *soap_endpoint_url, const char *soap_action, int sid, ns1__authInfo *authInfo)
{
	struct ns1__getTrsSites soap_tmp_ns1__getTrsSites;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsSites";
	soap_tmp_ns1__getTrsSites.sid = sid;
	soap_tmp_ns1__getTrsSites.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsSites(soap, &soap_tmp_ns1__getTrsSites);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsSites(soap, &soap_tmp_ns1__getTrsSites, "ns1:getTrsSites", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsSites(soap, &soap_tmp_ns1__getTrsSites, "ns1:getTrsSites", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsSites(struct ns1__getTrsSitesResponse &_param_1)
{
	soap_default_ns1__getTrsSitesResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsSitesResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getStatesByList(const char *soap_endpoint_url, const char *soap_action, stidList *request, ns1__authInfo *authInfo)
{
	struct ns1__getStatesByList soap_tmp_ns1__getStatesByList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getStatesByList";
	soap_tmp_ns1__getStatesByList.request = request;
	soap_tmp_ns1__getStatesByList.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getStatesByList(soap, &soap_tmp_ns1__getStatesByList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getStatesByList(soap, &soap_tmp_ns1__getStatesByList, "ns1:getStatesByList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getStatesByList(soap, &soap_tmp_ns1__getStatesByList, "ns1:getStatesByList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getStatesByList(struct ns1__getStatesByListResponse &_param_1)
{
	soap_default_ns1__getStatesByListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getStatesByListResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getCountiesByList(const char *soap_endpoint_url, const char *soap_action, ctidList *request, ns1__authInfo *authInfo)
{
	struct ns1__getCountiesByList soap_tmp_ns1__getCountiesByList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getCountiesByList";
	soap_tmp_ns1__getCountiesByList.request = request;
	soap_tmp_ns1__getCountiesByList.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getCountiesByList(soap, &soap_tmp_ns1__getCountiesByList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCountiesByList(soap, &soap_tmp_ns1__getCountiesByList, "ns1:getCountiesByList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCountiesByList(soap, &soap_tmp_ns1__getCountiesByList, "ns1:getCountiesByList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getCountiesByList(struct ns1__getCountiesByListResponse &_param_1)
{
	soap_default_ns1__getCountiesByListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCountiesByListResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTag(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo)
{
	struct ns1__getTag soap_tmp_ns1__getTag;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTag";
	soap_tmp_ns1__getTag.id = id;
	soap_tmp_ns1__getTag.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTag(soap, &soap_tmp_ns1__getTag);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTag(soap, &soap_tmp_ns1__getTag, "ns1:getTag", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTag(soap, &soap_tmp_ns1__getTag, "ns1:getTag", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTag(struct ns1__getTagResponse &_param_1)
{
	soap_default_ns1__getTagResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTagResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getMode(const char *soap_endpoint_url, const char *soap_action, int mode, ns1__authInfo *authInfo)
{
	struct ns1__getMode soap_tmp_ns1__getMode;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getMode";
	soap_tmp_ns1__getMode.mode = mode;
	soap_tmp_ns1__getMode.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getMode(soap, &soap_tmp_ns1__getMode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getMode(soap, &soap_tmp_ns1__getMode, "ns1:getMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getMode(soap, &soap_tmp_ns1__getMode, "ns1:getMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getMode(struct ns1__getModeResponse &_param_1)
{
	soap_default_ns1__getModeResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getModeResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsType(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo)
{
	struct ns1__getTrsType soap_tmp_ns1__getTrsType;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsType";
	soap_tmp_ns1__getTrsType.id = id;
	soap_tmp_ns1__getTrsType.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsType(soap, &soap_tmp_ns1__getTrsType);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsType(soap, &soap_tmp_ns1__getTrsType, "ns1:getTrsType", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsType(soap, &soap_tmp_ns1__getTrsType, "ns1:getTrsType", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsType(struct ns1__getTrsTypeResponse &_param_1)
{
	soap_default_ns1__getTrsTypeResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsTypeResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsFlavor(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo)
{
	struct ns1__getTrsFlavor soap_tmp_ns1__getTrsFlavor;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsFlavor";
	soap_tmp_ns1__getTrsFlavor.id = id;
	soap_tmp_ns1__getTrsFlavor.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsFlavor(soap, &soap_tmp_ns1__getTrsFlavor);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsFlavor(soap, &soap_tmp_ns1__getTrsFlavor, "ns1:getTrsFlavor", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsFlavor(soap, &soap_tmp_ns1__getTrsFlavor, "ns1:getTrsFlavor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsFlavor(struct ns1__getTrsFlavorResponse &_param_1)
{
	soap_default_ns1__getTrsFlavorResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsFlavorResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getTrsVoice(const char *soap_endpoint_url, const char *soap_action, int id, ns1__authInfo *authInfo)
{
	struct ns1__getTrsVoice soap_tmp_ns1__getTrsVoice;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getTrsVoice";
	soap_tmp_ns1__getTrsVoice.id = id;
	soap_tmp_ns1__getTrsVoice.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getTrsVoice(soap, &soap_tmp_ns1__getTrsVoice);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTrsVoice(soap, &soap_tmp_ns1__getTrsVoice, "ns1:getTrsVoice", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTrsVoice(soap, &soap_tmp_ns1__getTrsVoice, "ns1:getTrsVoice", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getTrsVoice(struct ns1__getTrsVoiceResponse &_param_1)
{
	soap_default_ns1__getTrsVoiceResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTrsVoiceResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getCountryList(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns1__getCountryList soap_tmp_ns1__getCountryList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getCountryList";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getCountryList(soap, &soap_tmp_ns1__getCountryList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCountryList(soap, &soap_tmp_ns1__getCountryList, "ns1:getCountryList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCountryList(soap, &soap_tmp_ns1__getCountryList, "ns1:getCountryList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getCountryList(struct ns1__getCountryListResponse &_param_1)
{
	soap_default_ns1__getCountryListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCountryListResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getCountryInfo(const char *soap_endpoint_url, const char *soap_action, int coid, ns1__authInfo *authInfo)
{
	struct ns1__getCountryInfo soap_tmp_ns1__getCountryInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getCountryInfo";
	soap_tmp_ns1__getCountryInfo.coid = coid;
	soap_tmp_ns1__getCountryInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getCountryInfo(soap, &soap_tmp_ns1__getCountryInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCountryInfo(soap, &soap_tmp_ns1__getCountryInfo, "ns1:getCountryInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCountryInfo(soap, &soap_tmp_ns1__getCountryInfo, "ns1:getCountryInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getCountryInfo(struct ns1__getCountryInfoResponse &_param_1)
{
	soap_default_ns1__getCountryInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCountryInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getStateInfo(const char *soap_endpoint_url, const char *soap_action, int stid, ns1__authInfo *authInfo)
{
	struct ns1__getStateInfo soap_tmp_ns1__getStateInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getStateInfo";
	soap_tmp_ns1__getStateInfo.stid = stid;
	soap_tmp_ns1__getStateInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getStateInfo(soap, &soap_tmp_ns1__getStateInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getStateInfo(soap, &soap_tmp_ns1__getStateInfo, "ns1:getStateInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getStateInfo(soap, &soap_tmp_ns1__getStateInfo, "ns1:getStateInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getStateInfo(struct ns1__getStateInfoResponse &_param_1)
{
	soap_default_ns1__getStateInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getStateInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getCountyInfo(const char *soap_endpoint_url, const char *soap_action, int ctid, ns1__authInfo *authInfo)
{
	struct ns1__getCountyInfo soap_tmp_ns1__getCountyInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getCountyInfo";
	soap_tmp_ns1__getCountyInfo.ctid = ctid;
	soap_tmp_ns1__getCountyInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getCountyInfo(soap, &soap_tmp_ns1__getCountyInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCountyInfo(soap, &soap_tmp_ns1__getCountyInfo, "ns1:getCountyInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCountyInfo(soap, &soap_tmp_ns1__getCountyInfo, "ns1:getCountyInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getCountyInfo(struct ns1__getCountyInfoResponse &_param_1)
{
	soap_default_ns1__getCountyInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCountyInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getAgencyInfo(const char *soap_endpoint_url, const char *soap_action, int aid, ns1__authInfo *authInfo)
{
	struct ns1__getAgencyInfo soap_tmp_ns1__getAgencyInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getAgencyInfo";
	soap_tmp_ns1__getAgencyInfo.aid = aid;
	soap_tmp_ns1__getAgencyInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getAgencyInfo(soap, &soap_tmp_ns1__getAgencyInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getAgencyInfo(soap, &soap_tmp_ns1__getAgencyInfo, "ns1:getAgencyInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getAgencyInfo(soap, &soap_tmp_ns1__getAgencyInfo, "ns1:getAgencyInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getAgencyInfo(struct ns1__getAgencyInfoResponse &_param_1)
{
	soap_default_ns1__getAgencyInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getAgencyInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getSubcatFreqs(const char *soap_endpoint_url, const char *soap_action, int scid, ns1__authInfo *authInfo)
{
	struct ns1__getSubcatFreqs soap_tmp_ns1__getSubcatFreqs;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getSubcatFreqs";
	soap_tmp_ns1__getSubcatFreqs.scid = scid;
	soap_tmp_ns1__getSubcatFreqs.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getSubcatFreqs(soap, &soap_tmp_ns1__getSubcatFreqs);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getSubcatFreqs(soap, &soap_tmp_ns1__getSubcatFreqs, "ns1:getSubcatFreqs", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getSubcatFreqs(soap, &soap_tmp_ns1__getSubcatFreqs, "ns1:getSubcatFreqs", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getSubcatFreqs(struct ns1__getSubcatFreqsResponse &_param_1)
{
	soap_default_ns1__getSubcatFreqsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getSubcatFreqsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_searchCountyFreq(const char *soap_endpoint_url, const char *soap_action, int ctid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo)
{
	struct ns1__searchCountyFreq soap_tmp_ns1__searchCountyFreq;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#searchCountyFreq";
	soap_tmp_ns1__searchCountyFreq.ctid = ctid;
	soap_tmp_ns1__searchCountyFreq.freq = freq;
	soap_tmp_ns1__searchCountyFreq.tone = tone;
	soap_tmp_ns1__searchCountyFreq.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__searchCountyFreq(soap, &soap_tmp_ns1__searchCountyFreq);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__searchCountyFreq(soap, &soap_tmp_ns1__searchCountyFreq, "ns1:searchCountyFreq", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__searchCountyFreq(soap, &soap_tmp_ns1__searchCountyFreq, "ns1:searchCountyFreq", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_searchCountyFreq(struct ns1__searchCountyFreqResponse &_param_1)
{
	soap_default_ns1__searchCountyFreqResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__searchCountyFreqResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_searchStateFreq(const char *soap_endpoint_url, const char *soap_action, int stid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo)
{
	struct ns1__searchStateFreq soap_tmp_ns1__searchStateFreq;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#searchStateFreq";
	soap_tmp_ns1__searchStateFreq.stid = stid;
	soap_tmp_ns1__searchStateFreq.freq = freq;
	soap_tmp_ns1__searchStateFreq.tone = tone;
	soap_tmp_ns1__searchStateFreq.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__searchStateFreq(soap, &soap_tmp_ns1__searchStateFreq);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__searchStateFreq(soap, &soap_tmp_ns1__searchStateFreq, "ns1:searchStateFreq", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__searchStateFreq(soap, &soap_tmp_ns1__searchStateFreq, "ns1:searchStateFreq", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_searchStateFreq(struct ns1__searchStateFreqResponse &_param_1)
{
	soap_default_ns1__searchStateFreqResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__searchStateFreqResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_searchMetroFreq(const char *soap_endpoint_url, const char *soap_action, int mid, const std::string& freq, const std::string& tone, ns1__authInfo *authInfo)
{
	struct ns1__searchMetroFreq soap_tmp_ns1__searchMetroFreq;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#searchMetroFreq";
	soap_tmp_ns1__searchMetroFreq.mid = mid;
	soap_tmp_ns1__searchMetroFreq.freq = freq;
	soap_tmp_ns1__searchMetroFreq.tone = tone;
	soap_tmp_ns1__searchMetroFreq.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__searchMetroFreq(soap, &soap_tmp_ns1__searchMetroFreq);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__searchMetroFreq(soap, &soap_tmp_ns1__searchMetroFreq, "ns1:searchMetroFreq", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__searchMetroFreq(soap, &soap_tmp_ns1__searchMetroFreq, "ns1:searchMetroFreq", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_searchMetroFreq(struct ns1__searchMetroFreqResponse &_param_1)
{
	soap_default_ns1__searchMetroFreqResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__searchMetroFreqResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getCountyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int ctid, int tag, ns1__authInfo *authInfo)
{
	struct ns1__getCountyFreqsByTag soap_tmp_ns1__getCountyFreqsByTag;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getCountyFreqsByTag";
	soap_tmp_ns1__getCountyFreqsByTag.ctid = ctid;
	soap_tmp_ns1__getCountyFreqsByTag.tag = tag;
	soap_tmp_ns1__getCountyFreqsByTag.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getCountyFreqsByTag(soap, &soap_tmp_ns1__getCountyFreqsByTag);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCountyFreqsByTag(soap, &soap_tmp_ns1__getCountyFreqsByTag, "ns1:getCountyFreqsByTag", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCountyFreqsByTag(soap, &soap_tmp_ns1__getCountyFreqsByTag, "ns1:getCountyFreqsByTag", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getCountyFreqsByTag(struct ns1__getCountyFreqsByTagResponse &_param_1)
{
	soap_default_ns1__getCountyFreqsByTagResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCountyFreqsByTagResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getAgencyFreqsByTag(const char *soap_endpoint_url, const char *soap_action, int aid, int tag, ns1__authInfo *authInfo)
{
	struct ns1__getAgencyFreqsByTag soap_tmp_ns1__getAgencyFreqsByTag;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getAgencyFreqsByTag";
	soap_tmp_ns1__getAgencyFreqsByTag.aid = aid;
	soap_tmp_ns1__getAgencyFreqsByTag.tag = tag;
	soap_tmp_ns1__getAgencyFreqsByTag.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getAgencyFreqsByTag(soap, &soap_tmp_ns1__getAgencyFreqsByTag);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getAgencyFreqsByTag(soap, &soap_tmp_ns1__getAgencyFreqsByTag, "ns1:getAgencyFreqsByTag", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getAgencyFreqsByTag(soap, &soap_tmp_ns1__getAgencyFreqsByTag, "ns1:getAgencyFreqsByTag", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getAgencyFreqsByTag(struct ns1__getAgencyFreqsByTagResponse &_param_1)
{
	soap_default_ns1__getAgencyFreqsByTagResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getAgencyFreqsByTagResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getMetroArea(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo)
{
	struct ns1__getMetroArea soap_tmp_ns1__getMetroArea;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getMetroArea";
	soap_tmp_ns1__getMetroArea.mid = mid;
	soap_tmp_ns1__getMetroArea.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getMetroArea(soap, &soap_tmp_ns1__getMetroArea);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getMetroArea(soap, &soap_tmp_ns1__getMetroArea, "ns1:getMetroArea", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getMetroArea(soap, &soap_tmp_ns1__getMetroArea, "ns1:getMetroArea", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getMetroArea(struct ns1__getMetroAreaResponse &_param_1)
{
	soap_default_ns1__getMetroAreaResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getMetroAreaResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getMetroAreaInfo(const char *soap_endpoint_url, const char *soap_action, int mid, ns1__authInfo *authInfo)
{
	struct ns1__getMetroAreaInfo soap_tmp_ns1__getMetroAreaInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getMetroAreaInfo";
	soap_tmp_ns1__getMetroAreaInfo.mid = mid;
	soap_tmp_ns1__getMetroAreaInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getMetroAreaInfo(soap, &soap_tmp_ns1__getMetroAreaInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getMetroAreaInfo(soap, &soap_tmp_ns1__getMetroAreaInfo, "ns1:getMetroAreaInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getMetroAreaInfo(soap, &soap_tmp_ns1__getMetroAreaInfo, "ns1:getMetroAreaInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getMetroAreaInfo(struct ns1__getMetroAreaInfoResponse &_param_1)
{
	soap_default_ns1__getMetroAreaInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getMetroAreaInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getZipcodeInfo(const char *soap_endpoint_url, const char *soap_action, int zipcode, ns1__authInfo *authInfo)
{
	struct ns1__getZipcodeInfo soap_tmp_ns1__getZipcodeInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getZipcodeInfo";
	soap_tmp_ns1__getZipcodeInfo.zipcode = zipcode;
	soap_tmp_ns1__getZipcodeInfo.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getZipcodeInfo(soap, &soap_tmp_ns1__getZipcodeInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getZipcodeInfo(soap, &soap_tmp_ns1__getZipcodeInfo, "ns1:getZipcodeInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getZipcodeInfo(soap, &soap_tmp_ns1__getZipcodeInfo, "ns1:getZipcodeInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getZipcodeInfo(struct ns1__getZipcodeInfoResponse &_param_1)
{
	soap_default_ns1__getZipcodeInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getZipcodeInfoResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_fccGetCallsign(const char *soap_endpoint_url, const char *soap_action, const std::string& callsign, ns1__authInfo *authInfo)
{
	struct ns1__fccGetCallsign soap_tmp_ns1__fccGetCallsign;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#fccGetCallsign";
	soap_tmp_ns1__fccGetCallsign.callsign = callsign;
	soap_tmp_ns1__fccGetCallsign.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__fccGetCallsign(soap, &soap_tmp_ns1__fccGetCallsign);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__fccGetCallsign(soap, &soap_tmp_ns1__fccGetCallsign, "ns1:fccGetCallsign", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__fccGetCallsign(soap, &soap_tmp_ns1__fccGetCallsign, "ns1:fccGetCallsign", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_fccGetCallsign(struct ns1__fccGetCallsignResponse &_param_1)
{
	soap_default_ns1__fccGetCallsignResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__fccGetCallsignResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_fccGetRadioServiceCode(const char *soap_endpoint_url, const char *soap_action, const std::string& code, ns1__authInfo *authInfo)
{
	struct ns1__fccGetRadioServiceCode soap_tmp_ns1__fccGetRadioServiceCode;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#fccGetRadioServiceCode";
	soap_tmp_ns1__fccGetRadioServiceCode.code = code;
	soap_tmp_ns1__fccGetRadioServiceCode.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__fccGetRadioServiceCode(soap, &soap_tmp_ns1__fccGetRadioServiceCode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__fccGetRadioServiceCode(soap, &soap_tmp_ns1__fccGetRadioServiceCode, "ns1:fccGetRadioServiceCode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__fccGetRadioServiceCode(soap, &soap_tmp_ns1__fccGetRadioServiceCode, "ns1:fccGetRadioServiceCode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_fccGetRadioServiceCode(struct ns1__fccGetRadioServiceCodeResponse &_param_1)
{
	soap_default_ns1__fccGetRadioServiceCodeResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__fccGetRadioServiceCodeResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_fccGetProxCallsigns(const char *soap_endpoint_url, const char *soap_action, const std::string& lat, const std::string& lon, const std::string& range, const std::string& unit, ns1__authInfo *authInfo)
{
	struct ns1__fccGetProxCallsigns soap_tmp_ns1__fccGetProxCallsigns;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#fccGetProxCallsigns";
	soap_tmp_ns1__fccGetProxCallsigns.lat = lat;
	soap_tmp_ns1__fccGetProxCallsigns.lon = lon;
	soap_tmp_ns1__fccGetProxCallsigns.range = range;
	soap_tmp_ns1__fccGetProxCallsigns.unit = unit;
	soap_tmp_ns1__fccGetProxCallsigns.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__fccGetProxCallsigns(soap, &soap_tmp_ns1__fccGetProxCallsigns);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__fccGetProxCallsigns(soap, &soap_tmp_ns1__fccGetProxCallsigns, "ns1:fccGetProxCallsigns", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__fccGetProxCallsigns(soap, &soap_tmp_ns1__fccGetProxCallsigns, "ns1:fccGetProxCallsigns", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_fccGetProxCallsigns(struct ns1__fccGetProxCallsignsResponse &_param_1)
{
	soap_default_ns1__fccGetProxCallsignsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__fccGetProxCallsignsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getUserData(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo)
{
	struct ns1__getUserData soap_tmp_ns1__getUserData;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getUserData";
	soap_tmp_ns1__getUserData.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getUserData(soap, &soap_tmp_ns1__getUserData);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUserData(soap, &soap_tmp_ns1__getUserData, "ns1:getUserData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUserData(soap, &soap_tmp_ns1__getUserData, "ns1:getUserData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getUserData(struct ns1__getUserDataResponse &_param_1)
{
	soap_default_ns1__getUserDataResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserDataResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RRWsdlBindingProxy::send_getUserFeedBroadcasts(const char *soap_endpoint_url, const char *soap_action, ns1__authInfo *authInfo)
{
	struct ns1__getUserFeedBroadcasts soap_tmp_ns1__getUserFeedBroadcasts;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.radioreference.com/soap2/index.php";
	if (soap_action == NULL)
		soap_action = "http://api.radioreference.com/soap2#getUserFeedBroadcasts";
	soap_tmp_ns1__getUserFeedBroadcasts.authInfo = authInfo;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__getUserFeedBroadcasts(soap, &soap_tmp_ns1__getUserFeedBroadcasts);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUserFeedBroadcasts(soap, &soap_tmp_ns1__getUserFeedBroadcasts, "ns1:getUserFeedBroadcasts", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUserFeedBroadcasts(soap, &soap_tmp_ns1__getUserFeedBroadcasts, "ns1:getUserFeedBroadcasts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int RRWsdlBindingProxy::recv_getUserFeedBroadcasts(struct ns1__getUserFeedBroadcastsResponse &_param_1)
{
	soap_default_ns1__getUserFeedBroadcastsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserFeedBroadcastsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
